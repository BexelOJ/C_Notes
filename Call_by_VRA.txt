★★★----------------------------------------------------------------------------
A - Address
V - Value
R - Reference


V     R      A 
-     -      &     //  Function Call
-     &      *     //  Function Definition


★★★----------------------------------------------------------------------------
In C++, the terms

call by reference
call by address
call by value

refer to different ways of passing arguments to functions.

★★★----------------------------------------------------------------------------
Here's the breakdown of the symbols associated with each:

1. Call by Value

Symbol:
No special symbol is used for call by value.

Explanation:
In call by value, the function receives a copy of the argument. Any changes made to the parameter inside the function do not affect the original variable.

Example:

void foo(int x)
{
    x = 10;  // Changes x locally, does not affect the original
}

int main()
{
    int a = 5;
    foo(a);  // Call by value, 'a' is unaffected
}

★★★----------------------------------------------------------------------------
2. Call by Reference

Symbol:
& (ampersand)

Explanation:
In call by reference, the function receives a reference to the original argument, meaning any changes made inside the function directly affect the original variable.

Example:

void foo(int &x)
{
    x = 10;  // Changes x directly, affects the original
}

int main()
{
    int a = 5;
    foo(a);  // Call by reference, 'a' is modified
}

★★★----------------------------------------------------------------------------
3. Call by Address

Symbol:
* (asterisk) for dereferencing and & (ampersand) for getting the address.

Explanation:
In call by address,
the function receives a pointer to the argument.
The function works with the address of the variable,
and any changes made inside the function affect the original variable by dereferencing the pointer.

Example:

void foo(int *x)     //  Function Definition
{
    *x = 10;  // Dereferences the pointer to modify the original
}

int main()
{
    int a = 5;
    foo(&a);  // Call by address, 'a' is modified      //  Function Call
}

★★★----------------------------------------------------------------------------
Summary of Symbols:

Call by Value:                No special symbol.

Call by Reference:            &

Call by Address:              * (dereferencing) and 
                              & (address-of operator)

★★★----------------------------------------------------------------------------
In C++,
call by reference and
call by address

are two different ways to pass arguments to a function, each with specific use cases. While call by reference is often preferred, call by address can be used in some situations where it is more appropriate or necessary. Here's a breakdown of why call by address might be used:

★★★----------------------------------------------------------------------------
Key Differences between Call by Reference and Call by Address:

Call by Reference: The function gets a reference (alias) to the original variable, meaning any changes to the parameter inside the function directly affect the original variable. It is simpler and safer because it avoids dealing with pointers explicitly.

void foo(int &x)
{
    x = 10; // Modifies the original variable
}

★★★----------------------------------------------------------------------------
Call by Address: The function gets a pointer to the original variable. The function must dereference the pointer to access and modify the value. This gives more control over memory and is sometimes necessary when working with dynamic memory or when the function might need to be passed a nullptr.

void foo(int *x)
{
    *x = 10; // Dereferences the pointer to modify the original variable
}


★★★----------------------------------------------------------------------------
Why Use Call by Address Instead of Call by Reference ?

1. Handling Optional Parameters:

Call by Address allows you to pass a null pointer to indicate that a value is not available or to handle optional parameters. This is not possible with call by reference, as references must always refer to a valid object.

For example, you might want to pass a pointer to a function and then check if the pointer is nullptr before modifying the object.


void foo(int *x)
{
    if (x != nullptr)
   {
        *x = 10;
    }
}

----------------------------------------------------------------------------
2. Working with Dynamic Memory:

When dealing with dynamically allocated memory (e.g., using new or malloc), call by address is often used because you are passing a pointer to an allocated block of memory. This is more flexible and allows managing dynamic memory explicitly.


void foo(int *x)
{
    *x = 10; // Changes the value at the dynamic memory location
}

int main()
{
    int *ptr = new int; // Dynamically allocated memory
    foo(ptr);
    delete ptr; // Don't forget to free memory
}

----------------------------------------------------------------------------
3. Working with Arrays:

When passing arrays to functions, call by address is used because arrays decay to pointers when passed to a function. This means you are passing the address of the first element of the array to the function, not a reference.


void foo(int *arr)
{
    arr[0] = 10; // Modifies the array using pointer
}

int main()
{
    int arr[5] = {1, 2, 3, 4, 5};
    foo(arr);
}

★★★----------------------------------------------------------------------------
4. Flexibility and Control:

Call by address provides more control because you can choose whether to dereference the pointer or not. You also have the ability to pass nullptr or perform pointer arithmetic. This is useful for low-level operations or certain advanced scenarios.


void foo(int *x)
{
    if (x)
    {
        *x = 5; // Dereference pointer and modify
    }
}

★★★----------------------------------------------------------------------------
5. Legacy Code and C-Style Functions:

In certain situations, especially when interacting with legacy C code or working with functions that expect pointers (like some older system calls, libraries, or API), call by address is used because C only deals with pointers and does not support references in the same way C++ does.

★★★----------------------------------------------------------------------------
6. Explicit Memory Management:

Call by address is useful when you want to have explicit control over memory management, especially when manipulating data structures like linked lists or trees, where pointers are inherently used to create links between nodes.

★★★----------------------------------------------------------------------------
Summary:

While call by reference is more intuitive, safer, and easier to use in most C++ cases, call by address has specific advantages:

It allows passing null pointers (useful for optional parameters).

It’s essential when dealing with Dynamic Memory or low-level operations.

It’s necessary when working with C-style code or when Pointer Manipulation is involved.


Thus, call by address is not necessarily better or worse than call by reference—it is simply a more flexible tool that is used when pointer semantics or memory management considerations require it.


★★★----------------------------------------------------------------------------

*  
(English) - asterisk 

(Programming) - dereference Operator / pointer indirection operator

&  
(English) - ampersand   
(Programming) - reference operator  /  address of Operator 


★★★----------------------------------------------------------------------------


★★★----------------------------------------------------------------------------


★★★----------------------------------------------------------------------------





